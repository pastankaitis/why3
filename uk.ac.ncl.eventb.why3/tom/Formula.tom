/*******************************************************************************
 * Copyright (c) 2006, 2010 ETH Zurich and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     ETH Zurich - initial API and implementation
 *     Systerel - fixed list operators
 *******************************************************************************/ 

/*
 *  This file contains the Tom declarations for the Formula class hierarchy,
 *  so that clients can use Tom pattern matching on formulas.
 */

%include {int.tom}
%include {string.tom}

/*
 * Declaration of sorts used.
 */

%typeterm Predicate {
	implement { Predicate }
	equals(t1,t2) { t1.equals(t2) }
}

%typeterm Expression {
	implement { Expression }
	equals(t1,t2) { t1.equals(t2) }
}

%typeterm BoundIdentDecl {
	implement { BoundIdentDecl }
	equals(t1,t2) { t1.equals(t2) }
}

%typeterm BigInteger {
	implement { BigInteger }
	equals(t1,t2) { t1.equals(t2) }
}

%typeterm PredicateList {
	implement { Predicate[] }
	equals(t1,t2) {
		java.util.Arrays.equals((Predicate[]) t1, (Predicate[]) t2)
	}
}

%typeterm ExpressionList {
	implement { Expression[] }
	equals(t1,t2) {
		java.util.Arrays.equals((Expression[]) t1, (Expression[]) t2)
	}
}

%typeterm BoundIdentDeclList {
	implement { BoundIdentDecl[] }
	equals(t1,t2) {
		java.util.Arrays.equals((BoundIdentDecl[]) t1, (BoundIdentDecl[]) t2)
	}
}


/*
 * Operators for lists
 */

%oparray PredicateList pList (Predicate*) {
	is_fsym(t) { true }
    get_size(t)      { t.length }
    get_element(t,n) { t[n] }
	make_empty(t) { null }
	make_append(e, t) { null }
}

%oparray ExpressionList eList (Expression*) {
	is_fsym(t) { true }
    get_size(t)      { t.length }
    get_element(t,n) { t[n] }
	make_empty(t) { null }
	make_append(e, t) { null }
}

%oparray BoundIdentDeclList bidList (BoundIdentDecl*) {
	is_fsym(t) { true }
    get_size(t)      { t.length }
    get_element(t,n) { t[n] }
	make_empty(t) { null }
	make_append(e, t) { null }
}

/*
 * AssociativePredicate
 */
 
%op Predicate AssociativePredicate (children : PredicateList) {
	is_fsym(t) { t instanceof AssociativePredicate }
	get_slot(children,t) { ((AssociativePredicate) t).getChildren() }
}

%op Predicate Land (children : PredicateList) {
	is_fsym(t) { t != null && t.getTag() == Formula.LAND }
	get_slot(children,t) { ((AssociativePredicate) t).getChildren() }
}

%op Predicate Lor (children : PredicateList) {
	is_fsym(t) { t != null && t.getTag() == Formula.LOR }
	get_slot(children,t) { ((AssociativePredicate) t).getChildren() }
}


/*
 * BinaryPredicate
 */
 
%op Predicate BinaryPredicate (left: Predicate, right: Predicate) {
	is_fsym(t) { t instanceof BinaryPredicate }
	get_slot(left,t) { ((BinaryPredicate) t).getLeft() }
	get_slot(right,t) { ((BinaryPredicate) t).getRight() }
}

%op Predicate Limp (left: Predicate, right: Predicate) {
	is_fsym(t) { t != null && t.getTag() == Formula.LIMP }
	get_slot(left,t) { ((BinaryPredicate) t).getLeft() }
	get_slot(right,t) { ((BinaryPredicate) t).getRight() }
}

%op Predicate Leqv (left: Predicate, right: Predicate) {
	is_fsym(t) { t != null && t.getTag() == Formula.LEQV }
	get_slot(left,t) { ((BinaryPredicate) t). getLeft() }
	get_slot(right,t) { ((BinaryPredicate) t).getRight() }
}

/*
 * UnaryPredicate
 */

%op Predicate UnaryPredicate (child: Predicate) {
	is_fsym(t) { t instanceof UnaryPredicate }
	get_slot(child,t) { ((UnaryPredicate) t). getChild() }
}

%op Predicate Not (child: Predicate) {
	is_fsym(t) { t != null && t.getTag() == Formula.NOT }
	get_slot(child,t) { ((UnaryPredicate) t). getChild() }
}

/*
 * RelationalPredicate
 */

%op Predicate RelationalPredicate (left: Expression, right: Expression) {
	is_fsym(t) { t instanceof RelationalPredicate }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate Equal (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.EQUAL }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate NotEqual (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.NOTEQUAL }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate Lt (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.LT }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate Le (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.LE }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate Gt (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.GT }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate Ge (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.GE }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate In (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.IN }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate NotIn (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.NOTIN }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate Subset (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.SUBSET }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate NotSubset (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.NOTSUBSET }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate SubsetEq (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.SUBSETEQ }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

%op Predicate NotSubsetEq (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.NOTSUBSETEQ }
	get_slot(left,t) { ((RelationalPredicate) t). getLeft() }
	get_slot(right,t) { ((RelationalPredicate) t).getRight() }
}

/*
 * QuantifiedPredicate
 */

%op Predicate QuantifiedPredicate (identifiers: BoundIdentDeclList, predicate: Predicate) {
	is_fsym(t) { t instanceof QuantifiedPredicate }
	get_slot(identifiers,t) { ((QuantifiedPredicate)t).getBoundIdentDecls() }
	get_slot(predicate,t) { ((QuantifiedPredicate)t).getPredicate() }
}

%op Predicate ForAll (identifiers: BoundIdentDeclList, predicate: Predicate) {
	is_fsym(t) { t != null && t.getTag() == Formula.FORALL }
	get_slot(identifiers,t) { ((QuantifiedPredicate)t).getBoundIdentDecls() }
	get_slot(predicate,t) { ((QuantifiedPredicate)t).getPredicate() }
}

%op Predicate Exists (identifiers: BoundIdentDeclList, predicate: Predicate) {
	is_fsym(t) { t != null && t.getTag() == Formula.EXISTS }
	get_slot(identifiers,t) { ((QuantifiedPredicate)t).getBoundIdentDecls() }
	get_slot(predicate,t) { ((QuantifiedPredicate)t).getPredicate() }
}

/* 
 * LiteralPredicate
 */

%op Predicate LiteralPredicate {
	is_fsym(t) { t instanceof LiteralPredicate }
}

%op Predicate BTRUE {
	is_fsym(t) { t != null && t.getTag() == Formula.BTRUE }
}

%op Predicate BFALSE {
	is_fsym(t) { t != null && t.getTag() == Formula.BFALSE }
}

/*
 * SimplePredicate
 */
 
%op Predicate SimplePredicate (child: Expression) {
	is_fsym(t) { t instanceof SimplePredicate}
	get_slot(child,t) { ((SimplePredicate) t).getExpression() }
}

%op Predicate Finite (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KFINITE }
	get_slot(child,t) { ((SimplePredicate) t).getExpression() }
}

/*
 * AssociativeExpression
 */

%op Expression AssociativeExpression (children: ExpressionList) {
	is_fsym(t) { t instanceof AssociativeExpression }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression BUnion (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.BUNION }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression BInter (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.BINTER }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression Bcomp (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.BCOMP }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression Fcomp (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.FCOMP }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression Ovr (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.OVR }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression Plus (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.PLUS }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}

%op Expression Mul (children: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.MUL }
	get_slot(children,t) { ((AssociativeExpression) t).getChildren() }
}
 
/*
 * AtomicExpression
 */
 
%op Expression AtomicExpression {
	is_fsym(t) { t instanceof AtomicExpression }
}

%op Expression Natural {
	is_fsym(t) { t != null && t.getTag() == Formula.NATURAL }
}
	
%op Expression Natural1 {
	is_fsym(t) { t != null && t.getTag() == Formula.NATURAL1 }
}

%op Expression INTEGER {
	is_fsym(t) { t != null && t.getTag() == Formula.INTEGER }
}

%op Expression BOOL {
	is_fsym(t) { t != null && t.getTag() == Formula.BOOL }
}
	
%op Expression TRUE {
	is_fsym(t) { t != null && t.getTag() == Formula.TRUE }
}

%op Expression FALSE {
	is_fsym(t) { t != null && t.getTag() == Formula.FALSE }
}

%op Expression EmptySet {
	is_fsym(t) { t != null && t.getTag() == Formula.EMPTYSET }
}
	
%op Expression PRED {
	is_fsym(t) { t != null && t.getTag() == Formula.KPRED }
}

%op Expression SUCC {
	is_fsym(t) { t != null && t.getTag() == Formula.KSUCC }
}

/*
 * BinaryExpression
 */

%op Expression BinaryExpression (left: Expression, right: Expression) {
	is_fsym(t) { t instanceof BinaryExpression }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Mapsto (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.MAPSTO }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Rel (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.REL }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Trel (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.TREL }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Srel (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.SREL }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Strel (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.STREL }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Pfun (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.PFUN }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Tfun (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.TFUN }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Pinj (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.PINJ }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Tinj (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.TINJ }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Psur (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.PSUR }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Tsur (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.TSUR }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Tbij (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.TBIJ }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression SetMinus (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.SETMINUS }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Cprod (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.CPROD }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Dprod (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.DPROD }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Pprod (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.PPROD }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression DomRes (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.DOMRES }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression DomSub (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.DOMSUB }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression RanRes (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.RANRES }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression RanSub (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.RANSUB }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression UpTo (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.UPTO }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Minus (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.MINUS }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Div (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.DIV }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Mod (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.MOD }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression Expn (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.EXPN }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression FunImage (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.FUNIMAGE }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

%op Expression RelImage (left: Expression, right: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.RELIMAGE }
	get_slot(left,t) { ((BinaryExpression) t).getLeft() }
	get_slot(right,t) { ((BinaryExpression) t).getRight() }
}

/*
 * BoolExpression
 */

%op Expression Bool (predicate: Predicate) {
	is_fsym(t) { t != null && t.getTag() == Formula.KBOOL }
	get_slot(predicate,t) { ((BoolExpression) t).getPredicate() }
}

/*
 * Identifier
 */

%op Expression Identifier {
	is_fsym(t) { t instanceof Identifier }
}

/*
 * FreeIdentifier
 */
%op Expression FreeIdentifier (name: String) {
	is_fsym(t) { t != null && t.getTag() == Formula.FREE_IDENT }
	get_slot(name,t) { ((FreeIdentifier)t).getName() }
}

/*
 * BoundIdentifier
 */
%op Expression BoundIdentifier (boundIndex: int) {
	is_fsym(t) { t != null && t.getTag() == Formula.BOUND_IDENT }
	get_slot(boundIndex,t) { ((BoundIdentifier)t).getBoundIndex() }
}

/*
 * IntegerLiteral
 */

%op Expression IntegerLiteral (value: BigInteger) {
	is_fsym(t) { t instanceof IntegerLiteral }
	get_slot(value,t) { ((IntegerLiteral) t).getValue() }
}

/*
 * QuantifiedExpression
 */

%op Expression Cset (identifiers: BoundIdentDeclList, predicate: Predicate, expression: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.CSET }
	get_slot(identifiers,t) { ((QuantifiedExpression)t).getBoundIdentDecls() }
	get_slot(predicate,t) { ((QuantifiedExpression)t).getPredicate() }
	get_slot(expression,t) { ((QuantifiedExpression)t).getExpression() }
}

%op Expression Qinter (identifiers: BoundIdentDeclList, predicate: Predicate, expression: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.QINTER }
	get_slot(identifiers,t) { ((QuantifiedExpression)t).getBoundIdentDecls() }
	get_slot(predicate,t) { ((QuantifiedExpression)t).getPredicate() }
	get_slot(expression,t) { ((QuantifiedExpression)t).getExpression() }
}

%op Expression Qunion (identifiers: BoundIdentDeclList, predicate: Predicate, expression: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.QUNION }
	get_slot(identifiers,t) { ((QuantifiedExpression)t).getBoundIdentDecls() }
	get_slot(predicate,t) { ((QuantifiedExpression)t).getPredicate() }
	get_slot(expression,t) { ((QuantifiedExpression)t).getExpression() }
}

/*
 * SetExtension
 */

%op Expression SetExtension (members: ExpressionList) {
	is_fsym(t) { t != null && t.getTag() == Formula.SETEXT }
	get_slot(members,t) { ((SetExtension)t).getMembers() }
}

/*
 * UnaryExpression
 */
 
%op Expression UnaryExpression (child: Expression) {
	is_fsym(t) { t instanceof UnaryExpression }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Card (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KCARD }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Pow (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.POW }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Pow1 (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.POW1 }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Union (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KUNION }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Inter (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KINTER }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Dom (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KDOM }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Ran (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KRAN }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Prj1 (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KPRJ1 }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Prj2 (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KPRJ2 }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Id (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KID }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Min (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KMIN }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Max (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.KMAX }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression Converse (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.CONVERSE }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}

%op Expression UnMinus (child: Expression) {
	is_fsym(t) { t != null && t.getTag() == Formula.UNMINUS }
	get_slot(child,t) { ((UnaryExpression) t).getChild() }
}
